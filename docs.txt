yarn global add live-server
=> we will need to see the html js output again and again 
> we will use expres ffor our production, livescript while we are developing and webpack for localhost 

Use live-server public for seeing the output of everything in public folder
right now we are using script tag to insert react react dom redux but later we will use webpack for it which is easy
react allows  us to create js code which creates components => components are the html codes 
=> to render/insert this html to DOM, we use react-dom library

create app.js which will create all the react or js code => and include this file in the html

JSX is JS XML which is extension for JS just like we have SAAS as extension for CSS

If we create a JSX code and try to render it inside html code like by inserting in div => it will show error 
=> this is because, the JSX code is not understood by the browser => we use babel for that

babel is a Javascript compiler. It helps us in many conversions -
1) JSX to plain old js => like needed here
2) ES6/ES7 to ES5 => ES6/6 comes with variety of new features like arrow function but these wont work on every browser because there are still some browser who dont support it yet and maybe never will 
=> for browser compatibility, we must convert ES6/7 anywhere in our code to plain old js => i,e, we maybe wrting Es6 but it will convert to Es5 in the end => and we know it can run everywhere

On babel website you can see conversion 
React.createElemet (tag name, attribute array, content ) 

=> but we want to automate this conversion and thus we will use babel library for that locally 
=> replace jsx by its equivalent code for old js given by babel 
and it works fine 

now we will install the babel and some of its presets => we will install react preset, the env preset which helps in getting us all es6 and es7 features
yarn global add babel-cli => comamnd line to access babel
babel --help 

Like in node, we used npm init for config of the project, here it is the yarn which does all that work like adding dependencies or init 
=> yarn init before every project

Now we will add the presets as dependency in package.json using the yarn module yarn add babel-preset-react

Now lets create app.js in src folder => this is js file where we will write our JSX code => then using babel commanline we will convert this code into old javascript code by outputing it into scripts/app.js
In commandline => babel src/app.js --out-file=public/scripts/app.js --presets=env,react

If we use this with --watch => it will keep running in background and make changes as we make any changes

We dont upload node modules on git or anything => to reinstall them on your machine, do yarm install just like we did npm install in node

Babel errors will appear in the terminal => when we give 2 root elements in JSX =>it throws error because JSX can have only one rrot element 

Now we willl see how to create dynamic templates => uise {variable name} tp insert any js content into template
 => dont't put object variable bcoz it wont know what to do with object 

 Now we will see conditional jSX => if log in then render this else render that => this type of stuff 
 => 1) we do it by making functions => we call function and it will contain conditions based on which it will return the var => we call this function inside {}
 2) Note that we can also do templating inside {} => actually, the function can return template as well based on condition like we have done 
 3) See that inside the function we are checking that if location exist then send template with dynamic location var inserted back to the caller which will again dynamically be rendered 
Now if the location is undefined => no need to do else retunr... => this is becuase if not exist, function will auto return undefined 
=> u will obeserve that in undefined case => it will become {undefined} at the caller side => in such a case i.e. {undefined} => nothing is rendered 
=> VIMP => by doing this we were able to di this : if location exist, create <p> template containing location else if not, then do nothing..no <p> is created, no location added as if we never did anything there 
Test this by removing location or makingit undefined 

Now let learn ternary operator which comes very handy many times
=> Before this, note that {undefined} is not rendered in JSX => {true} or {false} or {null} will not be rendered too as they are undefined  => this is imp feature which makes things easier and neat
Now ternary => {user.name ? user.name : 'ccecr'} => if user.name will exist, it is true else undefined will correspond to false 

Next we will learn logical AND operator => these are little different than java => true && 'soem text' gives 'some text' => false && 'some text' gives false
=> {user.age>=18 && (here put whatever you want to render if true)} => if not true, it will be false/undefined => nothign rendered like in earlier cases 

=> 3 techniques => ternary, AND operator or simple if else by calling a function

Now look at the playground/es6 for types of varibaled in es6 javascript
Now lets look at the arrow function => in normal function, var f = function(a,b) you may call f(1,2,3) => you may pass no. of arguments not same as in signature BUT still inside function you can do log(arguments) to access all arguments BUT in arrow function,
1) You can't access arguments and you must stricylt follow the signature while calling function otherwie it will throw error
2) Arrow function uses "this" of their parent scope 
=> 
const user = {
    name : 'Andrew',
    cities: ['Delhi','Pune'],
    printFunc : function(){
        this.cities.forEach((city)=>{
            console.log(this.name);
        });
    }
}
=> above inside forEach we have used arrow function => inside this function if you use "this" => what will be the scope that "this" will refer to ?? => It wont refer to scope inside of arrow function 
=> in arrow function "this" referes to scope of parent "this" => parent of this arrow function is scope = inside of object 
=> this inside arrow = this inside object scope => this referes to object 
 
=> Had it been normal function => "this would have refreed to scope = scope inside function " => this.cities would have shown error because, there are no cities inside function scope (="this" scope)

