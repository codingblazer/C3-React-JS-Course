yarn global add live-server
=> we will need to see the html js output again and again 
> we will use expres ffor our production, livescript while we are developing and webpack for localhost 

Use live-server public for seeing the output of everything in public folder
right now we are using script tag to insert react react dom redux but later we will use webpack for it which is easy
react allows  us to create js code which creates components => components are the html codes 
=> to render/insert this html to DOM, we use react-dom library

create app.js which will create all the react or js code => and include this file in the html

JSX is JS XML which is extension for JS just like we have SAAS as extension for CSS

If we create a JSX code and try to render it inside html code like by inserting in div => it will show error 
=> this is because, the JSX code is not understood by the browser => we use babel for that

babel is a Javascript compiler. It helps us in many conversions -
1) JSX to plain old js => like needed here
2) ES6/ES7 to ES5 => ES6/6 comes with variety of new features like arrow function but these wont work on every browser because there are still some browser who dont support it yet and maybe never will 
=> for browser compatibility, we must convert ES6/7 anywhere in our code to plain old js => i,e, we maybe wrting Es6 but it will convert to Es5 in the end => and we know it can run everywhere

On babel website you can see conversion 
React.createElemet (tag name, attribute array, content ) 

=> but we want to automate this conversion and thus we will use babel library for that locally 
=> replace jsx by its equivalent code for old js given by babel 
and it works fine 

now we will install the babel and some of its presets => we will install react preset, the env preset which helps in getting us all es6 and es7 features
yarn global add babel-cli => comamnd line to access babel
babel --help 

Like in node, we used npm init for config of the project, here it is the yarn which does all that work like adding dependencies or init 
=> yarn init before every project

Now we will add the presets as dependency in package.json using the yarn module yarn add babel-preset-react

Now lets create app.js in src folder => this is js file where we will write our JSX code => then using babel commanline we will convert this code into old javascript code by outputing it into scripts/app.js
In commandline => babel src/app.js --out-file=public/scripts/app.js --presets=env,react

If we use this with --watch => it will keep running in background and make changes as we make any changes

We dont upload node modules on git or anything => to reinstall them on your machine, do yarm install just like we did npm install in node

Babel errors will appear in the terminal => when we give 2 root elements in JSX =>it throws error because JSX can have only one rrot element 

Now we willl see how to create dynamic templates => uise {variable name} tp insert any js content into template
 => dont't put object variable bcoz it wont know what to do with object 

 Now we will see conditional jSX => if log in then render this else render that => this type of stuff 
 => 1) we do it by making functions => we call function and it will contain conditions based on which it will return the var => we call this function inside {}
 2) Note that we can also do templating inside {} => actually, the function can return template as well based on condition like we have done 
 3) See that inside the function we are checking that if location exist then send template with dynamic location var inserted back to the caller which will again dynamically be rendered 
Now if the location is undefined => no need to do else retunr... => this is becuase if not exist, function will auto return undefined 
=> u will obeserve that in undefined case => it will become {undefined} at the caller side => in such a case i.e. {undefined} => nothing is rendered 
=> VIMP => by doing this we were able to di this : if location exist, create <p> template containing location else if not, then do nothing..no <p> is created, no location added as if we never did anything there 
Test this by removing location or makingit undefined 

Now let learn ternary operator which comes very handy many times
=> Before this, note that {undefined} is not rendered in JSX => {true} or {false} or {null} will not be rendered too as they are undefined  => this is imp feature which makes things easier and neat
Now ternary => {user.name ? user.name : 'ccecr'} => if user.name will exist, it is true else undefined will correspond to false 

Next we will learn logical AND operator => these are little different than java => true && 'soem text' gives 'some text' => false && 'some text' gives false
=> {user.age>=18 && (here put whatever you want to render if true)} => if not true, it will be false/undefined => nothign rendered like in earlier cases 

=> 3 techniques => ternary, AND operator or simple if else by calling a function

Now look at the playground/es6 for types of varibaled in es6 javascript
Now lets look at the arrow function => in normal function, var f = function(a,b) you may call f(1,2,3) => you may pass no. of arguments not same as in signature BUT still inside function you can do log(arguments) to access all arguments BUT in arrow function,
1) You can't access arguments and you must stricylt follow the signature while calling function otherwie it will throw error
2) Arrow function uses "this" of their parent scope 
=> 
const user = {
    name : 'Andrew',
    cities: ['Delhi','Pune'],
    printFunc : function(){
        this.cities.forEach((city)=>{
            console.log(this.name);
        });
    }
}
=> above inside forEach we have used arrow function => inside this function if you use "this" => what will be the scope that "this" will refer to ?? => It wont refer to scope inside of arrow function 
=> in arrow function "this" referes to scope of parent "this" => parent of this arrow function is scope = inside of object 
=> this inside arrow = this inside object scope => this referes to object 
 
=> Had it been normal function => "this would have refreed to scope = scope inside function " => this.cities would have shown error because, there are no cities inside function scope (="this" scope)

In JSX , inside <button>, its not class. It is className
Search react DOM on google for more such attributes in JSX corresponding to their HTML equivalent => all of them are camelcase

You can also give value of id or class in JSX through a variable too like button id={var} or button onClick = {function_name}

Now are making counter app using event handlers => we have created a template with button and text => added a count as a variable in it => inside onClick on +/-, we are first changing same count variable we put in template
=> but we also need to render the new value => Now we have put template and render function inside some function => this will be called whenever we have to render things => it will be called first time for init and then just after count var value is changed

But if you see everytime we call this rendering func, it will recreate the same template and re render which will be overkill for big apps => but react handles it efficiently 
=>  Some developer tools note : Open dev tools elements tab => click on button now and see the elements tab => it will flash everything that is re rendered by react 
also you will see some comments realted to react which also helps 

Now we will see how to create forms => simply add form in template => Now, since on submitting a form in browser, the page sends thr data in url we want to avoid this default behavior => add onSubmit inside your form and give the function where we will handle this case
Now onSubmit={onFormSubmit} => dont make it {onFormSubmit()} because then you will be calling the function and it will return undefined => we dont want that 
=> Now inside onFormSubmit function we will be receiing the event e argument by default => call prevent default
We can get the form elements as e.target.elements => Now access element by its name => name = option for textfield => .option.value will give value by user in this element 
=> Now push this element to the options array in app object and then clear the field so user can submit new entry in the form 
Now though we have got array of all options in array But it is in js, not jsx => how to use it in jsx => 
JSX supports js arrays, strings, numbers AND ignores objects, booleans, undefined, null  by using {put code here like we did variables}
=> For array => again put array inside {} => Though null undefined etc can be used but they will be ignored in array
=> { [1,2,3] } => actually it will be breaked down to individual jsx elements => {1},{2,{3}} i.e. as if we have defined multiple {number} jsx
Array can contain the tags as well 
[<p>A</p>,<p>B</p>]  
=> though it will be rendered, we will have error in the consolde => actually JSX uses keys for optimisation processs => to keep track of these array jsx elements, a key has to be attached at the time of declaring them which will 
be used by JSX for internal references and provide optimisation in renderign For ex => to know that this element is same as before and don;t need to be rendered again 
=> If you give key=1 to <p> and then dynamically changes key to 2 => JSX will treat this element as new one and will create new instead of re rendering => however if key is same, it knows that it is same and it will only modify the changes

Now we can execute some code inside { code here} which will return us any JSX expression 
=>  we can use maps to iterate over options array and for each of them return li tag 

Components => we can break our app inti small componenets => has its own JSX, events => reusable self contained units 
on any page we can break the page into components => there will be one parent tag and all other componenets can be used by their name as if they are html tags => their implementation will be abstracted 

ES6 classes => though we already studied about it in Node lectures => One of the ES6 feature is to have optional arguments -
1) constructor(name = 'Anonymous'){   // => if name not passed, it is anonymous by default 
    ....
}
2) constructor (name){
this.name = name || 'test';   //=> if name not given, take value as test else as name 
}

If inheriting parent class => call its constructor before setting your values b super 


Creating components

1) Create a component => crete a class with camelcase name and it must extend the React.Component class 
2) Override the render method in which define the jsx for your react component 
3) Now you can use all the components you created above in your jsx code by treating component class as tags and render it by using ReactDom.render (jsx,where to insert)

We can create our complete app as a  React component class => make Indecision app itself as component and then inside it use other components 
=> it is like components inside components => another example is use of option component inside options class/component => it is nexting of components 
=> whenever you need component inside component => use it inside code of parent render() function 

Props of components 
=> let say you have a component but you want to reuse it but with different data => props helps us 
=> while using any component <Header/> we can send data with it in form of attribute => this attribute/data/prop will be accessible to us inside this component's class 
=> this.props contain all the props that are sent to us and you can thus set that data to component 

=> in code, we first created array of options and then sent it as prop to options compo and then inside it using map, for each of them, we created option component by sending data for each of them as popr to Option compnent 
=> the key is added since we are using jsx arrays

the props allowed us to communicate in one direction only => to coomunicate in other, we use handlers/event handlers 
=> within component, if inside render, you have button and its onClick => define its onclick handler within the same class 
=> we have done this for a form inside addOption class component 

Now lets see binding 
=> when you call this.handleRemoveAll inside render() of component, it works or if you use this.props 
but if inside the handleRemoveAll method of component class itself, if you use this.props () => will show error => why ?
when you said onClick = handleRemoveAll, you didn't do function call like any java etc handleRemoveAll() => you just passed reference to the object 
=> react just got referene to the function object..it doesn't know which scope this function was in => it dont know what "this" meant inside func => bcoz it just got the function 
=> "this" inside handleRemoveAll refers to the window and not the current component object 
=> since render() function is always associted with component class, react knew that "this" means the current object
=> while passing function reference to react for onClick, we must also pass the scope "this" of this function => we must pass that which scope will be used for this function 
=> you should do, onClick = this.handleRemoveAll.bind(scope you want which is nothing but current "this") 
OR 
=> you can also, use constructor to do so => the constructor always receieve a parameter props => inside constructor, first super the props as we dont want to mess with its internal functioning
=> then you can call this.handleRemoveAll (means the class function) = this.handleRemoveAll.bind(this) (mean the class function along with scope specified to it)
=> remember that like render(), inside constructor also, the "this" referes to object only 

You should prefer 2nd one bcoz render is called again and again and doing same thing unneceesary is not good 

Lets see how to setup state in react 
=> 1) come up with defualt set of values => in counter app, it is 0 => if outside the react component => use var else if inside => use object => default state object
=> 2) Component will be rendered with this default value => counter will be rendered on screen with intial val as 0
=> 3)  change state based on some event like netwrok req or button click => +1 button increases count => chnage state
=> 4) component is re rendered with the above changed state value
=> the step 2 and 4 => automatically rendered with new state value => we dont have to do it manually 

=> inside constructor when the component is created we gie its defualt value like given here 
=> now, as the state changes => when event happens, we use this.setState function which automatically receives the states previous values as parameter in form of prevState
=> Note that all the states are defined inside constructor woth their defaults 
=> Now, inside setState function return a object containing all the states you want to change as key with their new values => Note that the states you are not returning for change will remain as it is 

Now lets work on indecision app => Till now we have only seen that props are sent from parent to child i.e. when using child as a tag inside parent, we give some attribute/prop value and that value is get inside the child class => from this.props which we receive there i.e. parent pass props to child and ask child to use these props to construct itself and return us object back

But lets consider opposite case => we should be able to inform parent
=> let say we want to remove all options => we should make options array empty and options array is inside the IndecisionApp class => removeAll function should be inside Indecision app
=> Now we have removeAll button inside Options class => when button is clicked => we must call function in parent class i.e. removeAll function in IndecisionApp class
this example may not seem clear BUT in general, this type of situation always occurs i.e. in parent class you have used different components as its child => now there are some things associated with state of this parent class => Now there can be situation in which any button inside any child clicked should change the state of parent class
=> To do this commiunication from child to parent => 

1) Make you function in parent class and use setState function to change the state => since state of same class is changed, you can do it 
2) Now earlier we sent props as attributes to childs => this time also we will send function reference to child as attributes => we are actually sendign child a "means" through which it can communicate to us => once it is received by child,it will talk from child to parent thru this 
3) Now take this function in the incoming props => first lets remove handleRemoveAll() from our child class i.e. Options class and also constrcutr bcoz we added it for this only 
4) To access use..this.props.handleDeletion for onClick 
5) Now since handleDeleteOptions is usig this.setState inside it and we kknow that "this" inside handleDeleteOptions is not the current object itself but is window ref 
=> We must bind it => eiether while callinf this function, attach .bind(scope) OR inside constructor bind scope to this function => Note that we could not have used first bcoz we are calling handleDeleteOptions from Options class and we need "this" of Indecision app


Now implementing the addOption function 
=> since options will get changed => it is state of Indecision appp => male function inside indecion to handle this
=> make a function in Indecision app and then bind it because we are going to use setState function by usinf this reference inside it
Now send this function to component class by giving attribute inside <child> tag which you used inside the parent class
=> Now we can access this method insdie the AddOption class 
=> Now we wont remove the old AddOption method inside AddOption class BCOZ it contains the e.preventDfault inside it as well 
=> what we can do is => let this thing work like before using the old addOption function and then inside AddOption function, after preverntDefault is done, then call the addOption function of our parent class using thia.prop.addOption 
=>  Now since we are using "this" inside class function, we must bind it => make constructor inside AddOption class and bind this function 
inside addOption of parent class, lets add the option => we could do prevState.options.push(option) BUT dont bcoz we dont want to modify the prev state directly 
=> we should instead get the prev state and then create new state and return it => using concat for this 

Add some error handling and validation inside the parent addOptions => if error => retuen the error back to the caller i.e. to the AddOption class bcoz error is specific to form and it should handle it 
=> on receiving the error, since it is also one kind of a state for the AddOptionc class, make state for error inside it 
=> use setState to return the rendering of error and add error inside div if render() function where it will show the error 


Now we are going to learn about the stateless function components => they dont have state, they are functions(not classes) and they are components 
=> we use both class based and these function based - when and why => if you see then some of the classes we made earlier didn't had any state i.e. they just had one render() function => we can say that it would be good to replace them by stateless function components 

=> see the user function as ex of this => we can use arrow function and inside it, just like we used to do inside render(), we can return HTML type JSX code 
=> Now to use this component, we can use like any class component only 
=> Now to send props/attr => we can send them like before as attr inside this compnent tag 
=> to receive these props, since we cant use " this" inside a function, we receive them as first parameter inside the function 

Advantages of using these functions => faster since not a class extending React.Component, neat, easy testing 

Now waht if some prop is being used but it was not passed by the parent => we can use default props => Header.defaultProps = {};

N0w we have added a chrome extension of react dev tools => inside chrome dev tools, react tab will show up => you can see the finally rendered html using react in form of components
Also you can select any component in this tab and then open console tab => inside it write $r to print everyrhing about the compnent you selected 

Now making some simplification using arrow functions wherver we are retuningn object 

Now lets make a button for each option that can remove that particulat option 
=> Now lets see how to structure your components => If you see all the functions are inside Indecision class => always make top level class to handle the query 
=> the AddOption is only component which has some function of its own => in that also it is finally calling function of indecision app class 

Now lets create a function for this => handleDeleteOption => bind this function as well 
=> now option compoentn must also contain a button of removing that option with it => add button inside render of option element
=> now for these button, if the button is clicked, handleDeleteOption should execute 
=>but it is present inside the indecision class => how to call this outside function for onclick of button 
=> 1) export handleDeleteOption function by making new prop key and its value as function for <options> tag. Since option tag is not present directly, we cant export this function directly to it
2) Now imoort the function we exported above inside definition of Options componetn => this.prop.handleDeleteOption
3) Now again export this function to the option class => To export, like earlier we will create a key inside <option> tag and it value will be this function i.e. this.prop.handleDeleteOption 
4) Now again inside option componemt class, import this function and for onclick call it 


But this will create a problem, why ?? because, onclick = {handleDeleteOption} => actually what happens is that when onclick event happens, the callback given inside brakcets gets called and event e object is passed as first arg=> here if we write this, that function will be called with e as argument but this function needs "option" as arg
=> create arrow callback which will get called when click event happens and will recieve e object...from inside of this callback then, call the handleDeleteOption function with option as argument passed 

Lets see lifecylce => statelesss dont havce any lifecyle which is one of the reason why they are so fast 
For class based => componentDidMount when component is created and mounted in the website 
componentDidUpdate when the component is updated like when state changes => it receives 2 args => prevProps and prevState
componentWillUnMount => when compnent goes away

within these 3, there are more lifecycle methodds => search on google 

let study about the localStorage of browser => it is global object and available to store data in form of key value paris => both are strings => if you give number, it will autp convert to string 
=> this local storage persist between refreshes also
=> localStorage.setItem('age','my');
.getItem('age');
.removeItem('age');
.clear() => clear all localStorage data 

Json = string representation of object in javascript language 
=> JSON.stringify(obj) => will return json for object 
=> JSON.parse(string for obj i.e. json value) => will return a object 
we can use json to convert array obj to string and then localStorage to store that array object 
=> we will do all the fetching of data inside componentDidMount and all the saving of data inside componentDidUpdate bcoz everytime componentDidUpdate, the options array is changed and we need to update this changed array in localStorage
=> The componentDidUpdate method is called even if there is no change i.e. if you click remove all button => the handleDeleteOptions will be called => now even if the array is already empty, it will again set array to [empty arr] => componentDidUpdate will be called 
=> we need to chekc using "if", if the array was actually changed => if yes, then only update the localStorage else not required 

=> to check if arr is changed => just compare their length 

Now inside componentDidMount, we will fetch the data from local storage (that user might have entered last time) and set state to that array 
=> if prev array is empty => then set state to empty array 
=> this function acts like init()

and inside componentDidUpdate which is called after every change => check for valid change and then store the new data in localStorage

Now lets study about webpack => it clubs all js files into one single file => we will put all the component in their separate files i.e. in their own space => Now inside one single js file we can take anything from component files 
=> actually we can communicate between js files using webpack => using this communication, we can grab any function or variable from other js file => using this we create just one single file which will in turn take things from compnent js files 
=> also we can similarly take anything from the 3rd party modules 

So in webpack file strcuture will be like this :
1) /public : will only contain single main js file => bundle.js
2) /src => will contain single js files like component js files 
3) /node_modules : will contain all the 3rd party js files 
=> webpack bundle.js also runs bable on its own => no need to run it yourself 
=> also  webpack compresses the js file 
=> it created scalability because to add any new compoennet we just create new single js compoennt file and use it inside bundle.js => earlier in each js file, wherver it was needed, we would have created that compoennt and also it would have been difficult to debug 

 it is bad to have global dependecies i.e. dont install thigns globally for example : babel cli and live script were installed globally bcoz => they are not added inside package,json and thus people cant know that they are needed for this project 
 also person wont be able to know the version that is needed for these + we have to run these in terminal again and again 

 => we will remove them => yarn global remove babel-cli live-server
 => we installed them locally and then inside package.jspn we have added scripts to run them with their shortcut syntax in the terminal 
 now install webpack from terminal => yarn add webpack and then add sceipt for that alspo 

 So script for webpack is just webpack --watch=> the watch helps in running it again and again
 => webpack needs a cinfig file to run => create config file => here we define 2 things => entry => input and output => absolute path of output and filename of it => we generally name it bundle.js and we used path lib for absolute path => note that __dirname gives the path of the project on any OS
Also install webpack cli => yarn add webpack-cli
 change in file strcuture => move app.js to playgrund => create new app.js in src folder and write single log statement as we are just testing it now 
 Now  create webpack file as told above in root of folder 
 => on runnign yarn run build (script fro webpack) => it will buiuld the project and create output in public folder by taking input from src/app.js which contaons log 
 Now delete the script folder as now we will always have single js file => bundle.js 
 Also in index.html, remove all script tags like react react dom etc => just include this bundle.js as dependency in index.html in script tag 
 => project strcuture is likee this config+ package.json file in root and 2 folders - src containing app.js as input and playground folder AND public folder containing index.html and bundle.js which is converted single js file of all js files in src folder 

 Now lets learn ES6 import and export which will be useful in breaking compoennts and communication 
 =>  
 =>Why cant we access everything from other files => if global scope for all then app could crash due to conflicts  => we have to export the functions etc
 => 2 types of exports => default and named => export {} =>  and now for import give name of this function also using from 
  these were named exports => importing and ecporting by name => in both import and export same name should be used for them 
   OR 
   you can put export keywork before function expression => it cant be done for variables, just for function expression => import for this will be same  

   Default exports => use "as default" while exporting => we can have only one default  
   see how we ipmported a deafulat export => they are not named => we can import them by anyname => like we have done usign anythign => since there is only one deafult => that name will be used for default 
    OR 
    for usign it inline => use export default keywork before function expression => we cant put is before variable

    See person.js which also have exports => though just for playground 

    Note : You faced error in webpack but it was bcoz your config file was not in root => must be in root 
    Error : ERROR in Entry module not found: Error: Can't resolve './src' i

    Now we will see how to import from 3rd party modules => lets do it for validator package 
     1) Install using yarn to add them in package.json and they get installed in node_modules folder
     2)_ import them by their correct name => import vlidator from 'validator'
     3) use simply use any function 

   now do it for rect and react dom bcoz earlier we added those in script tag in html 
    Now lets learna bout webpack loaders => loader are the tool in webpack which loads the files and convert them to any medium like running through babel at time of loading or cnverting them to scss at time of loading 

    Now install the babel core => this is different from the babel cli in a way that this allows the tools like webpack to use babel internally 
    => yarn add babel-core 
    =>  yarn add babel-loader => this tool teaches webpack about how to run babel 
     
     Next insdie the config file of webpack we will set up thigns for the loader => done using module object 
     => you define a array of rules like rule to convert scsss to css etc 

     => make a rule array inside module object => each rule take 3 things : the loader -> in case of babel it is babel-loader we just installed => specify that 
     2)  test => which files to run this loader on, a regular expression for that   3) exclude => the files to exclude 

     But we havent givent he presets that are required by the babel => for that we have to setup a babel config file => call it .babaelrc and define the presets inside it in json format 

     Now like we said earlier, there should be one component per file => create components folder inside src => each component is named in upper camel case with filename same as component name 
     => src has 3 type : playground dont bother 2) app.js main js file which will be converted by webpack and contain component from component folder 3) component folder containing all the Components

     Now create compoentns like these => for AddOption create component js file => since it used react => write 3rd party import for react (no need of react dom as rendering is not done here, it is done in main app.js )
     Also using default export, eport the complete class 
     Now inside the app.js import the above exported class and verything will  work as before 


     Same thing has to be done if it is stateless component => In that case if you want to export as default => DONT USE export default keywork before function expression i.e. bcoz it doesn't work with function variable named expression 
     => we have to remvoe the varibale and in chrom react dev tools, since no veriable name is present, for them, ]<Unknown key will be shown > => to solve this,dont use export default inline BUT at the end separately as done 

     Now if yuo see, the option component is not needed by app.js...it is needed by the options => import for option mus tbe in options.js component 

    Let say that you get a error => when you visit the browser console it will show you the line where it occured but that line will be in bundle.js => it is very difficult to know from where it was bundled => we use source maps for that
    => inside config file, we need to add devtool : see that tool  
    => now if error occur => we will find exact file where it occured 
    => Note that if you make changes to coinfig file, watch script wont run => run yarn run build again 

    Next we will install webpack dev server => it is similar to live server but offers some features that makes working with webpack easier 
    => yarn add webpack-dev-server
    Now inside webpack config file, we need to tell that which folder will this serve => like for live server we specified public folder inside package.json in script => add deverver property inside the webpack config file 
     
     Now lets modify some scripts => inside package.json 
     => we dont need babel script now => remove it 
     => Now when we run webpack server, it automatiacally runs the webpack command i.e. building of biundle.js is done automatically => we dont need build script too BUT we will need it during production, so dont remove now 
     => add script for running webpack server => this script alone will run server like a live server + it will run build command to generate bundle.js 

     Advantage of webpack server => 1) need just one scriopt now and it watches automatically too
     2) it generated bundle.js in its own memory => it does not create bundle.js physical file in our project => this saves time for writing this file and other loading => makes server fast too + no need of having extra file 
     => we can delete bundle.js and it will still work on running the server + it wont create the bundle.js in our project 
     => if we ever need that bundle.js file, we can run build command individuyaly and it will generate bundle file 
     
     Now we will add a plugin of babel => yarn add babel-plugin-transform-class-properties
     => this plugin helps us shorten the class syntax => we were creating constructor, binding of functions inside constructor and many more things which can be simplfies by using this plugin and babel will convert this extended js into normal js for us 
     Now inside the .babaelrc, add this plugin 

     Now what things can be changed => 1) whernver we need to make class property, we were making it inside contrsutor like : this.newprop = 'cwec'
     => now instead, dont create a constructor...like in java, create prop as newprop = 'cwc'
     => earlier we were defining state inside constructot like this.state = {} => just instead so it outside the constructor like we do in java => state = {}

     2) Earlier we were binding the class functions inside the constructor => this was done bcoz when we assign the reference to this class function in some variable, the context "this" gets lost => "this" inside these function no more point to the class 
     => instead, use arrow function => since "this" inside arrow function always equals to their parent and we know that this class function has parent as class => even if we give reference to this function, whenver we call it, "this" inside it will refer to parent i.e. class/object 

=> we have done this for every component => you can see the diference between old and new syantax  

Now lets say we have <header> and <footer> components and we need a placeholder between them where we can change layouts dynamixally since it is single page app 
=> 1st way ReactDom.render(<IndecisionApp middle="layout"/> => use props => inside Indecision them, take this middle layout and put them between header and footer 
=> 2nd way => children props => are present inbuilt => ReactDom.render(<Indecision>
<p></p>
...put anything you want between indecision as its children dynamicallly
</Indecision>) 

=> now inside indecison render, you can access this children part as props.children

...............................................................................

Now we will use 3rd party component for dialog => react modal => search on google 
=> yarn add react-modal 
=> create a new component file => OptionModal.js and make imports (see imports for 3rd part modules from their docs online ) 
=> create a arrow function i.e. stateless component for model and export it 
Here we are returning JSX => we will be using the modal syntax => you can see from the docs 
=> import this component inside IndecisoinApp.js 
=> Inside the render of Indecision component, put this imported Modal Component
=> Now modal has to be shown/not => that has to be done in response to some event => But it is state of modal 
=> since the topmost level should handle all the data i.e. Indecision App component => make a state = selectedOption 
Just look at the handlePick function where we are generating random option from the list => this function is fired when "ehat should i do button is clicked"



Now when user clicks the What should i do button => 
=> Inside handlePick you can see that we will pick any random option from the list and show that in the model 
=> we should pass the random option to modal somehow so it can show it inside it 
Note that state = random option => initially we have made it undefined 
=> Inside render where OptionModal tag is used, we must take the current state value and pass it as prop so that OptionModal can accordingly set itself visible/not i.e. if undefined => it means that there are no option => no point showiunf modal => we wont show else show 
=> There is attribute for MOdal tag in doc of it using which it can be hidden/shown => set that incming prop value as => we have done !!selectedOption => it will convert into boolean true if any option comes, else if it is undefined then it turns false i.e. dont show 

Also next we are showing the option that we recieved inside the modal 
Now create a button inside the modal "ok" which will be used to dismiss this modal 
=> also create a event handler for this button inside indecision app and then pass its reference down and down till the modal component so that it can call it with button's onlicck => handleClearOption handler 
also set the onRequestClose property of modal to this handler bcoz this property call the specified function when modal is closed by escape key or abruptly 

Note : At many places we have used arrow function with return => but we can use them without return => make those modification as well 

lets look at the styling now : 

inside src create a syles folder and create styles.css file => add some style to it 
=> Now we will use webpack to load these styles => for that we need to install loaders => css-loader and style-loader 
=> inside the config file of webpack => we will add another rule for css => test will be all the css file 
=> But now since we have 2 loaders, "use" key is used to define the array of loaders 
=> install the loader as => yarn add css-loader style-loader 
=> next write a import statement in app.js to load the styles in it i.e styles.css file => that's ol 

Now we are not going to use css i.e. we will be using the sass langauge => visit its website
using webpack we will then convert this styling language to equal regular css 
sass vs scss => both are same, just sass dont use semicolons and curly braces like we did in css BUT scss does use them like css 

Now we have converted everything for css to scss liek file extensions etc 
=> now for scss we need 2 things : 1) loader to load scss file like for babel we did sass-loader 
2) loader to convert the scss file into regular css => node-sass

Now add this sass-loader to config file => behind the scenes, webpack will use node-sass to convert this to css 

We can also break styles in multiple files and then use them using imports feature of scss 
=> Create a base folder which will contain styles which are global to app 
=> next create _base which will contain partials => _ denotes that it is partial => it will be used in some other main style file => the files name that don't start with _ are the main files i.e. which serves as the entry point for styles For ex- styles.scss is main file 
Now we have created a font family inside this partial => Now imported this file in styles.scss 

We will use rem unit for dimension instead of pixel =>  1 rem = 16 pixels 
But dealing with it can be diffucult since it is 16 base 
=> trick for dealing => create html tag and apply font-size to be 62.5% => every rem size will now become base 10 
=> 62.5% of 16 = 10 that's why => if we want 22 pixel, now we can do 2.2 rem (base 10)

next create a folder components containing all the scss partials for individual components 
then create a header partial and import it inside style.scss i.e. the main file bcoz partial file is not applied anywhere yet..it just exist => by importing into main file, it is applied 

Now lets wrote scss inside this header partial => create a class called header and inside it defioned css rules 
Now apply this class somewhere => inside header component jsx, add this class to div (remember that in jsx, it is not class but className)

Note that inside header styles, since it is scss, we can create nested rules => like here, we have nested h1 inside header class => means that for every h1 inside header class apply these /
But avoid this => commented out 

Note that we are following BEM naming convention => Block element modifier 
=> header__title => header is block and title is elemen inside it 

create a style for title and subtile of header also and apply their class 

Now you would have seen that header is having some spaces at boundary which is bcoz of browser default styles and is different for every browser => reset them => for this we use library that does the work for us 
yarn add normalize.css => Now import this css file in app.js (bcoz untimately every style goes to style.scss and that goes to app.js)
But this file wont work bcoz webpack does not know how to load css files (remember that in config, we changed css to scss => it only knows how to load scss) => in webpack config make that change 

Now we will create setting scss file which will contain all the dimensions like we used to do in android 
=> this file is imported in style.scss as it is top heirarchy of all styles => Put import of this above ll imports bcoz this contain variables which will be used in other imported files and thus should come first 

=> we have put all colors in this file, all dimensions. Some things like font weight maybe kept that way bcoz they are not used that frequently 

Now inside component folder create container partial => this is used to bring everything in the center 
=> include this file in style.scss 
=> inside this file, define max width => this container will contain all the content => if we dont set max width, it will take 100% width and things will remain as it is => even if we give margin, it wont add them as it is having 100% browser space 
=> next think it like 600 px movable box containing content => if browser size is more than this, this box should be in center and remaining broser space should be used as margin => did that using auto 
=> add some padding as well bcoz currently if small browser i.e. less than 600 px, then it box will take all the space => content will stick to left => padding will give some space on left in this case 
=> Now apply this inside the header component => create a new div bcoz if we apply on current div, then blue bg will also reduce due to margin and padding but we want it to cover all broswer window 
=> also apply this to Indecision app i.e. apply container in body content bcoz we also want it to be in center 

add blue background for the body  

Now what should i do button is styled => create button.scss and inport it inside style.scss 
Now apply this class on button what dhould i do 
inside button.scss we have used darken function which is sass function => there are similar functions available 

also we have defined button styles for disabled state : pseudo class i.e. :disabled 

Now if you see cursor, it is not clickable symbol => inside base, we have defined that for buttions, cursor should be pointer => targetted all buttons here (not created class) => since it is general i.e. apply to all buttons, we have put this inside base 

inside button.scss define style for regular buttons like add remve 
and apply this class to small button everywhere

But if you see then remove button and remove all are slightly different => thus we will override the above button style and modify them as little 
=> this is done using modifier => for naming, use the class you want to override followed by 2 hiphens and name of the new class => like button--link 
To apply it, use it like : <className="button button-link">

=> use it wherever applicable 

Now we will style the listbox => lets call it widget => we have to add a heading on this box "Your Options" which is not present curently 
=> inside Options component, add it => now put this along with the Remove all button inside single div and we want them together 
=> Now create a style partial widget => import this in style.scss 
Inside this widget has different parts and we will create classes for them - 
1) widget header cotnaining "Your options" and remove all => apply it on div containing these 2 => display type is flex meaning that horizontal stacking /
the justify content property will make all the space between these 2 to divide equally between them 

2) widget title which is actually part of widget header only i.e. "your options" part BUt we dont want to use nested => create separate for this 
3) widget => the outside box that you see containing everything 
apply it on Indecision app 
4) message => for "please add an optuon to get started" => this section 

Now we will try to style the option individually => create option.scss and import it 
inside this file, add flex to make remove and text horizontal stack and justify 

Now we want to have the number before option showing up => Inside Options.js we are using map to go thru all the options => we also get a index as 2nd argument in map => send this index+1 as prop to Option component itself 
=> Inside Option component, take this above passed index and set it as text of that option 

cretae class for text inside the option

Next we will create new file for styles of add button and textbox 
=> create addOption partila dn import it => 
1) This may show error message => create class for it 
2) For input box => we do want to flex textbox and add button but the textbox must take all the empty space 
=> dont give justify, just give flex and then for input, apply class to it with flex grow which makes the applied component to grow and takw all the space 

apply these at their places 